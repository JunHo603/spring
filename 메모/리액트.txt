프론트엔드 프레임워크 4개
1. 리액트(React) - 45%
2. 앵귤러(Angular) - 25%
3. 뷰(Vue) - 20%
4. 스벨트(Svelte) - 10%
-------------------------------------------------------------------------------------------------------------------
* 런타임 환경이란 ?
- 컴파일
- 빌드
- 배포
- 패키지 매니저
등등 소프트웨어를 만들기 위한 언어의 개발 환경 묶음
-------------------------------------------------------------------------------------------------------------------
react 시작

* node -v - 노드 버전 확인
vs(비쥬얼 스튜디오) 상단 터미널 -> 새터미널 -> node -v 입력하면 node.js 버전 확인

* npm - 노드 패키지 매니저 (node.js 다운받으면 자동으로 설치됨)
         다양한 JavaScript 라이브러리와 패키지를 쉽게 설치하고 관리할 수 있음
         영구히 설치됨
vs(비쥬얼 스튜디오) 상단 터미널 -> 새터미널 -> npm -v 입력하면 npm 버전 확인

* npx - 매번 설치한다
vs(비쥬얼 스튜디오) 상단 터미널 -> 새터미널 -> npx create-react-app . 입력하면 npx 설치
npx create-react-app .만 붙으면 현재폴더 (띄어쓰기 필수)
npx create-react-app .뒤에는 생성할 폴더 (띄어쓰기 필수)

* npm start - npm 시작하는것

*  npm install style-components
vs(비쥬얼 스튜디오) 상단 터미널 -> 새터미널 -> npm install styled-components 설치
-------------------------------------------------------------------------------------------------------------------
localhost3000(react) <-> localhost8080 서로 데이터를 주고받음

react 폴더 구조
node_modules -> 다운받은 데이터들
public -> 잘 사용하지않음 / index.html은 가끔 사용
src -> 주로 여기서 작업함
-------------------------------------------------------------------------------------------------------------------
JSX - html과 유사한 구조의 태그를 이용한 스크립트 언어
       컴파일 과정에서 html로 변환됨

※ 구조
index.html (root) -> index.js -> app.js -> function App() 에 코드작성

JSX의 기본 규칙
1. 컴포넌트 이름은 반드시 대문자로 시작
2. JSX코드는 반드시 하나의 부모태그로 감싸져야함
   - return뒤에 동일라인에 시작태그를 반드시 써줘야함
   - <></> 이름이 없는 empty tag를 사용해도됨

3. 모든 태그는 닫혀야된다
4. 내부 javascript 코드는 { }안에 작성
   - ex) const name = getUserName();
   - <div>{name}</div>

5. 클래스 속성은 이름이 className을 사용
   - ex) <div class="ex"></div> X
   - ex) <div className="ex"></div> O

6. 인라인 스타일은 반드시 객체형태 = JSON 형태로 줘야함
   - ex) <SideMenu stlye="color:#fff, margin:10px"></SideMenu> X
   - ex) <SideMenu stlye={{color:#fff, margin:10px}}></SideMenu> O
   - 기존 css속성이 -를 가지면 CamelCase로 변환시킴
   - ex) background-color -> backgroundColor

7. 조건부 코드는 if문 대신 삼항연산자를 사용
   - ex) {
           name != null ? (참 결과) : (거짓 결과)
          }
-------------------------------------------------------------------------------------------------------------------
export하는법 2가지
1. export 여러개 사용해야될때 씀
   export function Test1(){

   }
2. default export는 무조건 한개밖에 안됨
   function Test1(){
    
   }
   export default Test1;

import할 js 파일 들어가서
import {Test1} from "./Components/20240722/test1.js"
-------------------------------------------------------------------------------------------------------------------
css는 js파일에서 import 해야됨
ex) import "./Test1.css";
-------------------------------------------------------------------------------------------------------------------
※ 문제점
: react는 index.html만 사용하므로 모든 css스타일이
  index.html에 복사됨. 클래스 이름이 중복되는 문제 발생
-> react의 구조와 잘 어울리는 css 스타일링 기술이 필요

※ 해결법
1. Styled Components (우리가 사용할 방법)
2. CSS Module
3. CSS-in-JS
4. Bootstrap
5. Tailwind CSS
-------------------------------------------------------------------------------------------------------------------
styled components 사용법

const 스타일링 태그이름 = styled.원래태그이름''
ex) const Containar = styled.div`
    width:100px;
    height:100px;
`
ex) const w = 300;
    const h = 200;

    const Box = styled.div`
      width: ${w}px;
      height: ${h}px;
      background-color: dodgerblue;
      margin: auto;
    `;
※ `는 1옆에 있는 특수문자임
-------------------------------------------------------------------------------------------------------------------
컴포넌트 호출
<List x={변수} y={변수} />

컴포넌트 받는법
function List(object)
{object.x} {object.y}
-------------------------------------------------------------------------------------------------------------------
** 컴포넌트가 매개변수를 받을 때 구조분해할당을 이용함
ex)
const options = {title:"Menu", width:100, height:200}
cosnt {title, width, height} = options;
-------------------------------------------------------------------------------------------------------------------
spread operator

const array1 = [1,2,3,4]
const array2 = [5,6,7,8]
const array3 = [array1, array2] // [[1,2,3,4],[5,6,7,8]]
const array4 = [...array1, ...array2] // [1,2,3,4,5,6,7,]
const array5 = [...array1, 5] // [1,2,3,4,5]
-------------------------------------------------------------------------------------------------------------------
http://openweathermap.org/  날씨가져오는 곳
http://api-ninjas.com/           여러가지 api를 가져올수 있는 곳
https://tabler.io/icons           아이콘 그림 가져오는곳

자바스크립트에서 사용하는 외부 라이브러리 링크 주소를 검색하기 위해 CDN을 찾아야함
검색 : tabler icons cdn // 주소 : https://cdnjs.com/libraries/tabler-icons

CDN이란, Content Disrtibution Network 컨텐트 분산 네트워크
- 웹에서 사용하는 여러 라이브러리를 지역마다 제공해주는 서버를 분산하여 설치한 네트워크
-------------------------------------------------------------------------------------------------------------------
Router 구조

<BrowserRouter>
  <Routes>
    <Route>
	
    </Route>
  </Routes>
</BrowserRouter>
-------------------------------------------------------------------------------------------------------------------
* 리액트 <-> 유니티
https://react-unity-webgl.dev/docs/api/send-message

npm install react-unity-webgl

public/build/4개의 unity 빌드파일 복사

Asset / Plugins / WebGL / React.jslib 생성