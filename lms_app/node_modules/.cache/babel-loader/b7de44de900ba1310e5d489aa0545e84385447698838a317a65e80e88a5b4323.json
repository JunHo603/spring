{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\Github\\\\lms_app\\\\src\\\\Components\\\\LMS\\\\Lecture\\\\LectureDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getLecture } from \"../../../Api/LectureApi/LectureApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function LectureDetail() {\n  _s();\n  const {\n    lectureId\n  } = useParams(); // URL에서 lectureId를 가져옴\n  const [lecture, setLecture] = useState(null); // lecture 데이터를 저장할 상태\n  const [loading, setLoading] = useState(true); // 로딩 상태 관리\n  const [error, setError] = useState(null); // 오류 상태 관리\n\n  useEffect(() => {\n    async function fetchLecture() {\n      try {\n        setLoading(true);\n        const data = await getLecture(lectureId); // getLecture API 호출\n        setLecture(data); // 가져온 데이터를 상태로 저장\n      } catch (err) {\n        setError(err); // 오류가 발생하면 오류 상태로 설정\n      } finally {\n        setLoading(false); // 로딩 상태를 종료\n      }\n    }\n    fetchLecture(); // 컴포넌트가 마운트될 때 API 호출\n  }, [lectureId]); // lectureId가 변경될 때마다 다시 호출\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this); // 로딩 중일 때 표시할 내용\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this); // 오류 발생 시 표시할 내용\n  }\n  if (!lecture) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this); // 데이터가 없을 때 표시할 내용\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lecture Detail\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Lecture ID: \", lectureId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Lecture Title: \", data.lectureName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Lecture Description: \", data.description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(LectureDetail, \"THaQzDpnwnnnpuoGoInJJ1yEJ7k=\", false, function () {\n  return [useParams];\n});\n_c = LectureDetail;\nvar _c;\n$RefreshReg$(_c, \"LectureDetail\");","map":{"version":3,"names":["React","useState","useEffect","useParams","getLecture","jsxDEV","_jsxDEV","LectureDetail","_s","lectureId","lecture","setLecture","loading","setLoading","error","setError","fetchLecture","data","err","children","fileName","_jsxFileName","lineNumber","columnNumber","message","lectureName","description","_c","$RefreshReg$"],"sources":["C:/Users/admin/Documents/Github/lms_app/src/Components/LMS/Lecture/LectureDetail.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getLecture } from \"../../../Api/LectureApi/LectureApi\";\r\n\r\nexport function LectureDetail() {\r\n  const { lectureId } = useParams(); // URL에서 lectureId를 가져옴\r\n  const [lecture, setLecture] = useState(null); // lecture 데이터를 저장할 상태\r\n  const [loading, setLoading] = useState(true); // 로딩 상태 관리\r\n  const [error, setError] = useState(null); // 오류 상태 관리\r\n\r\n  useEffect(() => {\r\n    async function fetchLecture() {\r\n      try {\r\n        setLoading(true);\r\n        const data = await getLecture(lectureId); // getLecture API 호출\r\n        setLecture(data); // 가져온 데이터를 상태로 저장\r\n      } catch (err) {\r\n        setError(err); // 오류가 발생하면 오류 상태로 설정\r\n      } finally {\r\n        setLoading(false); // 로딩 상태를 종료\r\n      }\r\n    }\r\n\r\n    fetchLecture(); // 컴포넌트가 마운트될 때 API 호출\r\n  }, [lectureId]); // lectureId가 변경될 때마다 다시 호출\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>; // 로딩 중일 때 표시할 내용\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error.message}</p>; // 오류 발생 시 표시할 내용\r\n  }\r\n\r\n  if (!lecture) {\r\n    return <p>No data found.</p>; // 데이터가 없을 때 표시할 내용\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Lecture Detail</h1>\r\n      <p>Lecture ID: {lectureId}</p>\r\n      <p>Lecture Title: {data.lectureName}</p>\r\n      <p>Lecture Description: {data.description}</p>\r\n      {/* 다른 강의 세부 정보 표시 */}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,UAAU,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,OAAO,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAU,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;EACnC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACd,eAAec,YAAYA,CAAA,EAAG;MAC5B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMI,IAAI,GAAG,MAAMb,UAAU,CAACK,SAAS,CAAC,CAAC,CAAC;QAC1CE,UAAU,CAACM,IAAI,CAAC,CAAC,CAAC;MACpB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZH,QAAQ,CAACG,GAAG,CAAC,CAAC,CAAC;MACjB,CAAC,SAAS;QACRL,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF;IAEAG,YAAY,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,EAAE,CAACP,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB,IAAIG,OAAO,EAAE;IACX,oBAAON,OAAA;MAAAa,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAC;EAC5B;EAEA,IAAIT,KAAK,EAAE;IACT,oBAAOR,OAAA;MAAAa,QAAA,GAAG,SAAO,EAACL,KAAK,CAACU,OAAO;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,CAAC,CAAC;EACxC;EAEA,IAAI,CAACb,OAAO,EAAE;IACZ,oBAAOJ,OAAA;MAAAa,QAAA,EAAG;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAC;EAChC;EAEA,oBACEjB,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBjB,OAAA;MAAAa,QAAA,GAAG,cAAY,EAACV,SAAS;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BjB,OAAA;MAAAa,QAAA,GAAG,iBAAe,EAACF,IAAI,CAACQ,WAAW;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxCjB,OAAA;MAAAa,QAAA,GAAG,uBAAqB,EAACF,IAAI,CAACS,WAAW;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE3C,CAAC;AAEV;AAACf,EAAA,CA3CeD,aAAa;EAAA,QACLJ,SAAS;AAAA;AAAAwB,EAAA,GADjBpB,aAAa;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}