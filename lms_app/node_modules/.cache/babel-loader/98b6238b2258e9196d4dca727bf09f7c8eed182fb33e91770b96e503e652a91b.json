{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\Github\\\\spring\\\\lms_app\\\\src\\\\Components\\\\Unity\\\\UnityProject.js\",\n  _s = $RefreshSig$();\n// import { Unity, useUnityContext } from \"react-unity-webgl\";\n// import { useState, useEffect } from \"react\";\n// import styled from \"styled-components\";\n\n// // 게임을 로드할 화면을 만듬\n// const Container = styled.div`\n//   width: 1344px;\n//   height: 756px;\n//   margin: auto;\n//   border: 1px solid gray;\n// `;\n\n// export function UnityProject() {\n//   // const { unityProvider } = useUnityContext({\n//   //     loaderUrl: \"build/myunityapp.loader.js\",\n//   //     dataUrl: \"build/myunityapp.data\",\n//   //     frameworkUrl: \"build/myunityapp.framework.js\",\n//   //     codeUrl: \"build/myunityapp.wasm\",\n//   // });\n\n//   // const [playingGame, setPlayingGame] = useState(false);\n//   const [playingGame, setPlayingGame] = useState(true);\n\n//   const [isGameOver, setIsGameOver] = useState(false);\n//   const [userName, setUserName] = useState();\n//   const [score, setScore] = useState();\n\n//   // React 에서 Unity 로 sendMessage 를 통해 전달하기\n//   const { unityProvider, sendMessage, addEventListener, removeEventListener } =\n//     useUnityContext({\n//       loaderUrl: \"build/Build.loader.js\",\n//       dataUrl: \"build/Build.data\",\n//       frameworkUrl: \"build/Build.framework.js\",\n//       codeUrl: \"build/Build.wasm\",\n//     });\n\n//   function handleGameOver(userName, score) {\n//     setIsGameOver(true);\n//     setUserName(userName);\n//     setScore(score);\n//   }\n\n//   useEffect(() => {\n//     addEventListener(\"GameOver\", handleGameOver);\n//     return () => {\n//       removeEventListener(\"GameOver\", handleGameOver);\n//     };\n//   }, []);\n\n//   return (\n//     <>\n//       <h1>UnityProject Game</h1>\n//       <button onClick={() => setPlayingGame(true)}>Start Game</button>\n//       <button onClick={() => sendMessage(\"Player\", \"Attack\")}>Attack</button>\n//       <Container>\n//         {playingGame ? (\n//           <Unity\n//             unityProvider={unityProvider}\n//             style={{\n//               width: \"100%\",\n//               height: \"100%\",\n//             }}\n//           />\n//         ) : null}\n//       </Container>\n\n//       {/* // Unity 에서 게임오버 메시지를 받으면 출력후 종료 */}\n//       {isGameOver === true && (\n//         <p>{`Game Over ${userName}! You've scored ${score} points.`}</p>\n//       )}\n//     </>\n//   );\n// }\nimport { Unity, useUnityContext } from \"react-unity-webgl\";\nimport { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\n\n// 게임을 로드할 화면을 만듬\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  width: 1344px;\n  height: 756px;\n  margin: auto;\n  border: 1px solid gray;\n`;\n_c = Container;\nexport function UnityProject() {\n  _s();\n  const unityRef = useRef(null);\n  const [playingGame, setPlayingGame] = useState(true);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  const [score, setScore] = useState(0);\n\n  // React 에서 Unity 로 sendMessage 를 통해 전달하기\n  const {\n    unityProvider,\n    sendMessage,\n    addEventListener,\n    removeEventListener\n  } = useUnityContext({\n    loaderUrl: \"build/Build.loader.js\",\n    dataUrl: \"build/Build.data\",\n    frameworkUrl: \"build/Build.framework.js\",\n    codeUrl: \"build/Build.wasm\"\n  });\n\n  // 게임 오버 핸들러\n  function handleGameOver(userName, score) {\n    setIsGameOver(true);\n    setUserName(userName);\n    setScore(score);\n\n    // 게임 데이터를 로컬 스토리지에 저장\n    const gameData = {\n      userName,\n      score\n    };\n    localStorage.setItem(\"unityGameData\", JSON.stringify(gameData));\n  }\n\n  // 컴포넌트가 마운트될 때 로컬 스토리지에서 게임 데이터 불러오기\n  useEffect(() => {\n    const savedGameData = localStorage.getItem(\"unityGameData\");\n    if (savedGameData) {\n      const {\n        userName,\n        score\n      } = JSON.parse(savedGameData);\n      setUserName(userName);\n      setScore(score);\n      setIsGameOver(true); // 게임 오버 상태로 복구\n    }\n\n    // Unity 이벤트 리스너 추가\n    addEventListener(\"GameOver\", handleGameOver);\n    return () => {\n      removeEventListener(\"GameOver\", handleGameOver);\n    };\n  }, [addEventListener, removeEventListener]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"UnityProject Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPlayingGame(true),\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendMessage(\"Player\", \"Attack\"),\n      children: \"Attack\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: playingGame ? /*#__PURE__*/_jsxDEV(Unity, {\n        ref: unityRef,\n        unityProvider: unityProvider,\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: `Game Over ${userName}! You've scored ${score} points.`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(UnityProject, \"KPBqx7W060dg5i5t9Mq8UAexRGE=\", false, function () {\n  return [useUnityContext];\n});\n_c2 = UnityProject;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"UnityProject\");","map":{"version":3,"names":["Unity","useUnityContext","useState","useEffect","useRef","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","UnityProject","_s","unityRef","playingGame","setPlayingGame","isGameOver","setIsGameOver","userName","setUserName","score","setScore","unityProvider","sendMessage","addEventListener","removeEventListener","loaderUrl","dataUrl","frameworkUrl","codeUrl","handleGameOver","gameData","localStorage","setItem","JSON","stringify","savedGameData","getItem","parse","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","style","width","height","_c2","$RefreshReg$"],"sources":["C:/Users/admin/Documents/Github/spring/lms_app/src/Components/Unity/UnityProject.js"],"sourcesContent":["// import { Unity, useUnityContext } from \"react-unity-webgl\";\r\n// import { useState, useEffect } from \"react\";\r\n// import styled from \"styled-components\";\r\n\r\n// // 게임을 로드할 화면을 만듬\r\n// const Container = styled.div`\r\n//   width: 1344px;\r\n//   height: 756px;\r\n//   margin: auto;\r\n//   border: 1px solid gray;\r\n// `;\r\n\r\n// export function UnityProject() {\r\n//   // const { unityProvider } = useUnityContext({\r\n//   //     loaderUrl: \"build/myunityapp.loader.js\",\r\n//   //     dataUrl: \"build/myunityapp.data\",\r\n//   //     frameworkUrl: \"build/myunityapp.framework.js\",\r\n//   //     codeUrl: \"build/myunityapp.wasm\",\r\n//   // });\r\n\r\n//   // const [playingGame, setPlayingGame] = useState(false);\r\n//   const [playingGame, setPlayingGame] = useState(true);\r\n\r\n//   const [isGameOver, setIsGameOver] = useState(false);\r\n//   const [userName, setUserName] = useState();\r\n//   const [score, setScore] = useState();\r\n\r\n//   // React 에서 Unity 로 sendMessage 를 통해 전달하기\r\n//   const { unityProvider, sendMessage, addEventListener, removeEventListener } =\r\n//     useUnityContext({\r\n//       loaderUrl: \"build/Build.loader.js\",\r\n//       dataUrl: \"build/Build.data\",\r\n//       frameworkUrl: \"build/Build.framework.js\",\r\n//       codeUrl: \"build/Build.wasm\",\r\n//     });\r\n\r\n//   function handleGameOver(userName, score) {\r\n//     setIsGameOver(true);\r\n//     setUserName(userName);\r\n//     setScore(score);\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     addEventListener(\"GameOver\", handleGameOver);\r\n//     return () => {\r\n//       removeEventListener(\"GameOver\", handleGameOver);\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <>\r\n//       <h1>UnityProject Game</h1>\r\n//       <button onClick={() => setPlayingGame(true)}>Start Game</button>\r\n//       <button onClick={() => sendMessage(\"Player\", \"Attack\")}>Attack</button>\r\n//       <Container>\r\n//         {playingGame ? (\r\n//           <Unity\r\n//             unityProvider={unityProvider}\r\n//             style={{\r\n//               width: \"100%\",\r\n//               height: \"100%\",\r\n//             }}\r\n//           />\r\n//         ) : null}\r\n//       </Container>\r\n\r\n//       {/* // Unity 에서 게임오버 메시지를 받으면 출력후 종료 */}\r\n//       {isGameOver === true && (\r\n//         <p>{`Game Over ${userName}! You've scored ${score} points.`}</p>\r\n//       )}\r\n//     </>\r\n//   );\r\n// }\r\nimport { Unity, useUnityContext } from \"react-unity-webgl\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// 게임을 로드할 화면을 만듬\r\nconst Container = styled.div`\r\n  width: 1344px;\r\n  height: 756px;\r\n  margin: auto;\r\n  border: 1px solid gray;\r\n`;\r\n\r\nexport function UnityProject() {\r\n  const unityRef = useRef(null);\r\n  const [playingGame, setPlayingGame] = useState(true);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [score, setScore] = useState(0);\r\n\r\n  // React 에서 Unity 로 sendMessage 를 통해 전달하기\r\n  const { unityProvider, sendMessage, addEventListener, removeEventListener } =\r\n    useUnityContext({\r\n      loaderUrl: \"build/Build.loader.js\",\r\n      dataUrl: \"build/Build.data\",\r\n      frameworkUrl: \"build/Build.framework.js\",\r\n      codeUrl: \"build/Build.wasm\",\r\n    });\r\n\r\n  // 게임 오버 핸들러\r\n  function handleGameOver(userName, score) {\r\n    setIsGameOver(true);\r\n    setUserName(userName);\r\n    setScore(score);\r\n\r\n    // 게임 데이터를 로컬 스토리지에 저장\r\n    const gameData = { userName, score };\r\n    localStorage.setItem(\"unityGameData\", JSON.stringify(gameData));\r\n  }\r\n\r\n  // 컴포넌트가 마운트될 때 로컬 스토리지에서 게임 데이터 불러오기\r\n  useEffect(() => {\r\n    const savedGameData = localStorage.getItem(\"unityGameData\");\r\n    if (savedGameData) {\r\n      const { userName, score } = JSON.parse(savedGameData);\r\n      setUserName(userName);\r\n      setScore(score);\r\n      setIsGameOver(true); // 게임 오버 상태로 복구\r\n    }\r\n\r\n    // Unity 이벤트 리스너 추가\r\n    addEventListener(\"GameOver\", handleGameOver);\r\n    return () => {\r\n      removeEventListener(\"GameOver\", handleGameOver);\r\n    };\r\n  }, [addEventListener, removeEventListener]);\r\n\r\n  return (\r\n    <>\r\n      <h1>UnityProject Game</h1>\r\n      <button onClick={() => setPlayingGame(true)}>Start Game</button>\r\n      <button onClick={() => sendMessage(\"Player\", \"Attack\")}>Attack</button>\r\n      <Container>\r\n        {playingGame ? (\r\n          <Unity\r\n            ref={unityRef}\r\n            unityProvider={unityProvider}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          />\r\n        ) : null}\r\n      </Container>\r\n\r\n      {/* Unity에서 게임오버 메시지를 받으면 출력후 종료 */}\r\n      {isGameOver && (\r\n        <p>{`Game Over ${userName}! You've scored ${score} points.`}</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}