{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\Github\\\\spring\\\\lms_app\\\\src\\\\Components\\\\Unity\\\\UnityProject.js\",\n  _s = $RefreshSig$();\nimport { Unity, useUnityContext } from \"react-unity-webgl\";\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\n// 게임을 로드할 화면을 만듬\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  width: 1344px;\n  height: 756px;\n  margin: auto;\n  border: 1px solid gray;\n`;\n_c = Container;\nexport function UnityProject() {\n  _s();\n  // const { unityProvider } = useUnityContext({\n  //     loaderUrl: \"build/myunityapp.loader.js\",\n  //     dataUrl: \"build/myunityapp.data\",\n  //     frameworkUrl: \"build/myunityapp.framework.js\",\n  //     codeUrl: \"build/myunityapp.wasm\",\n  // });\n\n  // const [playingGame, setPlayingGame] = useState(false);\n  const [playingGame, setPlayingGame] = useState(true);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [userName, setUserName] = useState();\n  const [score, setScore] = useState();\n  function SaveSceneState(sceneName) {\n    localStorage.setItem(\"currentScene\", sceneName);\n  }\n  useEffect(() => {\n    const currentScene = localStorage.getItem(\"currentScene\");\n    if (currentScene) {\n      // Unity 인스턴스에 현재 씬 복원 요청\n      unityInstance.SendMessage(\"SceneManager\", \"LoadScene\", currentScene);\n    }\n  }, []);\n\n  // React 에서 Unity 로 sendMessage 를 통해 전달하기\n  const {\n    unityProvider,\n    sendMessage,\n    addEventListener,\n    removeEventListener\n  } = useUnityContext({\n    loaderUrl: \"build/Build.loader.js\",\n    dataUrl: \"build/Build.data\",\n    frameworkUrl: \"build/Build.framework.js\",\n    codeUrl: \"build/Build.wasm\"\n  });\n  function handleGameOver(userName, score) {\n    setIsGameOver(true);\n    setUserName(userName);\n    setScore(score);\n  }\n  useEffect(() => {\n    addEventListener(\"GameOver\", handleGameOver);\n    return () => {\n      removeEventListener(\"GameOver\", handleGameOver);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"UnityProject Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPlayingGame(true),\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendMessage(\"Player\", \"Attack\"),\n      children: \"Attack\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: playingGame ? /*#__PURE__*/_jsxDEV(Unity, {\n        unityProvider: unityProvider,\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), isGameOver === true && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: `Game Over ${userName}! You've scored ${score} points.`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(UnityProject, \"FKiW/wUbTSpZOQIMsBGIz0xV7bs=\", false, function () {\n  return [useUnityContext];\n});\n_c2 = UnityProject;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"UnityProject\");","map":{"version":3,"names":["Unity","useUnityContext","useState","useEffect","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","UnityProject","_s","playingGame","setPlayingGame","isGameOver","setIsGameOver","userName","setUserName","score","setScore","SaveSceneState","sceneName","localStorage","setItem","currentScene","getItem","unityInstance","SendMessage","unityProvider","sendMessage","addEventListener","removeEventListener","loaderUrl","dataUrl","frameworkUrl","codeUrl","handleGameOver","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","width","height","_c2","$RefreshReg$"],"sources":["C:/Users/admin/Documents/Github/spring/lms_app/src/Components/Unity/UnityProject.js"],"sourcesContent":["import { Unity, useUnityContext } from \"react-unity-webgl\";\r\nimport { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// 게임을 로드할 화면을 만듬\r\nconst Container = styled.div`\r\n  width: 1344px;\r\n  height: 756px;\r\n  margin: auto;\r\n  border: 1px solid gray;\r\n`;\r\n\r\nexport function UnityProject() {\r\n  // const { unityProvider } = useUnityContext({\r\n  //     loaderUrl: \"build/myunityapp.loader.js\",\r\n  //     dataUrl: \"build/myunityapp.data\",\r\n  //     frameworkUrl: \"build/myunityapp.framework.js\",\r\n  //     codeUrl: \"build/myunityapp.wasm\",\r\n  // });\r\n\r\n  // const [playingGame, setPlayingGame] = useState(false);\r\n  const [playingGame, setPlayingGame] = useState(true);\r\n\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [userName, setUserName] = useState();\r\n  const [score, setScore] = useState();\r\n\r\n  function SaveSceneState(sceneName) {\r\n    localStorage.setItem(\"currentScene\", sceneName);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const currentScene = localStorage.getItem(\"currentScene\");\r\n    if (currentScene) {\r\n      // Unity 인스턴스에 현재 씬 복원 요청\r\n      unityInstance.SendMessage(\"SceneManager\", \"LoadScene\", currentScene);\r\n    }\r\n  }, []);\r\n\r\n  // React 에서 Unity 로 sendMessage 를 통해 전달하기\r\n  const { unityProvider, sendMessage, addEventListener, removeEventListener } =\r\n    useUnityContext({\r\n      loaderUrl: \"build/Build.loader.js\",\r\n      dataUrl: \"build/Build.data\",\r\n      frameworkUrl: \"build/Build.framework.js\",\r\n      codeUrl: \"build/Build.wasm\",\r\n    });\r\n\r\n  function handleGameOver(userName, score) {\r\n    setIsGameOver(true);\r\n    setUserName(userName);\r\n    setScore(score);\r\n  }\r\n\r\n  useEffect(() => {\r\n    addEventListener(\"GameOver\", handleGameOver);\r\n    return () => {\r\n      removeEventListener(\"GameOver\", handleGameOver);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>UnityProject Game</h1>\r\n      <button onClick={() => setPlayingGame(true)}>Start Game</button>\r\n      <button onClick={() => sendMessage(\"Player\", \"Attack\")}>Attack</button>\r\n      <Container>\r\n        {playingGame ? (\r\n          <Unity\r\n            unityProvider={unityProvider}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          />\r\n        ) : null}\r\n      </Container>\r\n\r\n      {/* // Unity 에서 게임오버 메시지를 받으면 출력후 종료 */}\r\n      {isGameOver === true && (\r\n        <p>{`Game Over ${userName}! You've scored ${score} points.`}</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}