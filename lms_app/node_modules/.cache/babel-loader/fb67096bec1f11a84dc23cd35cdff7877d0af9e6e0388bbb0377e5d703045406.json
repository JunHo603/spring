{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\Github\\\\spring\\\\lms_app\\\\src\\\\Components\\\\Unity\\\\UnityProject.js\",\n  _s = $RefreshSig$();\n// import { Unity, useUnityContext } from \"react-unity-webgl\";\n// import { useState, useEffect } from \"react\";\n// import styled from \"styled-components\";\n\n// // 게임을 로드할 화면을 만듬\n// const Container = styled.div`\n//   width: 1344px;\n//   height: 756px;\n//   margin: auto;\n//   border: 1px solid gray;\n// `;\n\n// export function UnityProject() {\n//   // const { unityProvider } = useUnityContext({\n//   //     loaderUrl: \"build/myunityapp.loader.js\",\n//   //     dataUrl: \"build/myunityapp.data\",\n//   //     frameworkUrl: \"build/myunityapp.framework.js\",\n//   //     codeUrl: \"build/myunityapp.wasm\",\n//   // });\n\n//   // const [playingGame, setPlayingGame] = useState(false);\n//   const [playingGame, setPlayingGame] = useState(true);\n\n//   const [isGameOver, setIsGameOver] = useState(false);\n//   const [userName, setUserName] = useState();\n//   const [score, setScore] = useState();\n\n//   // React 에서 Unity 로 sendMessage 를 통해 전달하기\n//   const { unityProvider, sendMessage, addEventListener, removeEventListener } =\n//     useUnityContext({\n//       loaderUrl: \"build/Build.loader.js\",\n//       dataUrl: \"build/Build.data\",\n//       frameworkUrl: \"build/Build.framework.js\",\n//       codeUrl: \"build/Build.wasm\",\n//     });\n\n//   function handleGameOver(userName, score) {\n//     setIsGameOver(true);\n//     setUserName(userName);\n//     setScore(score);\n//   }\n\n//   useEffect(() => {\n//     addEventListener(\"GameOver\", handleGameOver);\n//     return () => {\n//       removeEventListener(\"GameOver\", handleGameOver);\n//     };\n//   }, []);\n\n//   return (\n//     <>\n//       <h1>UnityProject Game</h1>\n//       <button onClick={() => setPlayingGame(true)}>Start Game</button>\n//       <button onClick={() => sendMessage(\"Player\", \"Attack\")}>Attack</button>\n//       <Container>\n//         {playingGame ? (\n//           <Unity\n//             unityProvider={unityProvider}\n//             style={{\n//               width: \"100%\",\n//               height: \"100%\",\n//             }}\n//           />\n//         ) : null}\n//       </Container>\n\n//       {/* // Unity 에서 게임오버 메시지를 받으면 출력후 종료 */}\n//       {isGameOver === true && (\n//         <p>{`Game Over ${userName}! You've scored ${score} points.`}</p>\n//       )}\n//     </>\n//   );\n// }\nimport { Unity, useUnityContext } from \"react-unity-webgl\";\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { getCurrentUser } from \"../../Api/UserApi/UserApi\";\n\n// 게임을 로드할 화면을 만듬\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  width: 1344px;\n  height: 756px;\n  margin: auto;\n  border: 1px solid gray;\n`;\n_c = Container;\nexport function UnityProject() {\n  _s();\n  const {\n    unityProvider,\n    sendMessage,\n    addEventListener,\n    removeEventListener\n  } = useUnityContext({\n    loaderUrl: \"build/Build.loader.js\",\n    dataUrl: \"build/Build.data\",\n    frameworkUrl: \"build/Build.framework.js\",\n    codeUrl: \"build/Build.wasm\"\n  });\n  const [playingGame, setPlayingGame] = useState(true);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [userName, setUserName] = useState();\n  const [score, setScore] = useState();\n  const [userId, setUserId] = useState(null);\n  useEffect(() => {\n    Axios();\n  }, []);\n  async function Axios() {\n    try {\n      const SessionData = await getCurrentUser();\n      setUserId(SessionData.userId);\n    } catch (error) {\n      console.error(\"Cart List Error:\", error);\n    }\n  }\n\n  // 상태를 로컬 스토리지에 저장\n  const saveGameState = () => {\n    sendMessage(\"GameController\", \"SaveGameState\");\n  };\n\n  // 상태를 로컬 스토리지에서 불러오기\n  const loadGameState = () => {\n    const savedState = localStorage.getItem(\"unityGameState\");\n    console.log(\"??\", savedState);\n    if (savedState) {\n      sendMessage(\"GameController\", \"LoadGameState\", savedState);\n    }\n  };\n  function handleGameOver(userName, score) {\n    setIsGameOver(true);\n    setUserName(userName);\n    setScore(score);\n    saveGameState();\n  }\n\n  // 컴포넌트가 마운트되었을 때 상태를 로드하고, 일정 간격으로 상태를 자동으로 저장\n  useEffect(() => {\n    addEventListener(\"GameOver\", handleGameOver);\n\n    // 페이지 로드 시 상태 복원\n    loadGameState();\n\n    // 일정 간격(예: 10초)으로 상태를 자동으로 저장\n    const autoSaveInterval = setInterval(() => {\n      saveGameState();\n    }, 10000); // 10초마다 저장\n\n    return () => {\n      removeEventListener(\"GameOver\", handleGameOver);\n      clearInterval(autoSaveInterval); // 컴포넌트 언마운트 시 인터벌 클리어\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"UnityProject Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: playingGame ? /*#__PURE__*/_jsxDEV(Unity, {\n        unityProvider: unityProvider,\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), isGameOver === true && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: `Game Over ${userName}! You've scored ${score} points.`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(UnityProject, \"3HMCWKZvRJ1w9zhHDTgQ+EjzRcY=\", false, function () {\n  return [useUnityContext];\n});\n_c2 = UnityProject;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"UnityProject\");","map":{"version":3,"names":["Unity","useUnityContext","useState","useEffect","styled","getCurrentUser","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","UnityProject","_s","unityProvider","sendMessage","addEventListener","removeEventListener","loaderUrl","dataUrl","frameworkUrl","codeUrl","playingGame","setPlayingGame","isGameOver","setIsGameOver","userName","setUserName","score","setScore","userId","setUserId","Axios","SessionData","error","console","saveGameState","loadGameState","savedState","localStorage","getItem","log","handleGameOver","autoSaveInterval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","_c2","$RefreshReg$"],"sources":["C:/Users/admin/Documents/Github/spring/lms_app/src/Components/Unity/UnityProject.js"],"sourcesContent":["// import { Unity, useUnityContext } from \"react-unity-webgl\";\r\n// import { useState, useEffect } from \"react\";\r\n// import styled from \"styled-components\";\r\n\r\n// // 게임을 로드할 화면을 만듬\r\n// const Container = styled.div`\r\n//   width: 1344px;\r\n//   height: 756px;\r\n//   margin: auto;\r\n//   border: 1px solid gray;\r\n// `;\r\n\r\n// export function UnityProject() {\r\n//   // const { unityProvider } = useUnityContext({\r\n//   //     loaderUrl: \"build/myunityapp.loader.js\",\r\n//   //     dataUrl: \"build/myunityapp.data\",\r\n//   //     frameworkUrl: \"build/myunityapp.framework.js\",\r\n//   //     codeUrl: \"build/myunityapp.wasm\",\r\n//   // });\r\n\r\n//   // const [playingGame, setPlayingGame] = useState(false);\r\n//   const [playingGame, setPlayingGame] = useState(true);\r\n\r\n//   const [isGameOver, setIsGameOver] = useState(false);\r\n//   const [userName, setUserName] = useState();\r\n//   const [score, setScore] = useState();\r\n\r\n//   // React 에서 Unity 로 sendMessage 를 통해 전달하기\r\n//   const { unityProvider, sendMessage, addEventListener, removeEventListener } =\r\n//     useUnityContext({\r\n//       loaderUrl: \"build/Build.loader.js\",\r\n//       dataUrl: \"build/Build.data\",\r\n//       frameworkUrl: \"build/Build.framework.js\",\r\n//       codeUrl: \"build/Build.wasm\",\r\n//     });\r\n\r\n//   function handleGameOver(userName, score) {\r\n//     setIsGameOver(true);\r\n//     setUserName(userName);\r\n//     setScore(score);\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     addEventListener(\"GameOver\", handleGameOver);\r\n//     return () => {\r\n//       removeEventListener(\"GameOver\", handleGameOver);\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <>\r\n//       <h1>UnityProject Game</h1>\r\n//       <button onClick={() => setPlayingGame(true)}>Start Game</button>\r\n//       <button onClick={() => sendMessage(\"Player\", \"Attack\")}>Attack</button>\r\n//       <Container>\r\n//         {playingGame ? (\r\n//           <Unity\r\n//             unityProvider={unityProvider}\r\n//             style={{\r\n//               width: \"100%\",\r\n//               height: \"100%\",\r\n//             }}\r\n//           />\r\n//         ) : null}\r\n//       </Container>\r\n\r\n//       {/* // Unity 에서 게임오버 메시지를 받으면 출력후 종료 */}\r\n//       {isGameOver === true && (\r\n//         <p>{`Game Over ${userName}! You've scored ${score} points.`}</p>\r\n//       )}\r\n//     </>\r\n//   );\r\n// }\r\nimport { Unity, useUnityContext } from \"react-unity-webgl\";\r\nimport { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { getCurrentUser } from \"../../Api/UserApi/UserApi\";\r\n\r\n// 게임을 로드할 화면을 만듬\r\nconst Container = styled.div`\r\n  width: 1344px;\r\n  height: 756px;\r\n  margin: auto;\r\n  border: 1px solid gray;\r\n`;\r\n\r\nexport function UnityProject() {\r\n  const { unityProvider, sendMessage, addEventListener, removeEventListener } =\r\n    useUnityContext({\r\n      loaderUrl: \"build/Build.loader.js\",\r\n      dataUrl: \"build/Build.data\",\r\n      frameworkUrl: \"build/Build.framework.js\",\r\n      codeUrl: \"build/Build.wasm\",\r\n    });\r\n\r\n  const [playingGame, setPlayingGame] = useState(true);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [userName, setUserName] = useState();\r\n  const [score, setScore] = useState();\r\n  const [userId, setUserId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    Axios();\r\n  }, []);\r\n  async function Axios() {\r\n    try {\r\n      const SessionData = await getCurrentUser();\r\n      setUserId(SessionData.userId);\r\n    } catch (error) {\r\n      console.error(\"Cart List Error:\", error);\r\n    }\r\n  }\r\n\r\n  // 상태를 로컬 스토리지에 저장\r\n  const saveGameState = () => {\r\n    sendMessage(\"GameController\", \"SaveGameState\");\r\n  };\r\n\r\n  // 상태를 로컬 스토리지에서 불러오기\r\n  const loadGameState = () => {\r\n    const savedState = localStorage.getItem(\"unityGameState\");\r\n    console.log(\"??\", savedState);\r\n    if (savedState) {\r\n      sendMessage(\"GameController\", \"LoadGameState\", savedState);\r\n    }\r\n  };\r\n\r\n  function handleGameOver(userName, score) {\r\n    setIsGameOver(true);\r\n    setUserName(userName);\r\n    setScore(score);\r\n    saveGameState();\r\n  }\r\n\r\n  // 컴포넌트가 마운트되었을 때 상태를 로드하고, 일정 간격으로 상태를 자동으로 저장\r\n  useEffect(() => {\r\n    addEventListener(\"GameOver\", handleGameOver);\r\n\r\n    // 페이지 로드 시 상태 복원\r\n    loadGameState();\r\n\r\n    // 일정 간격(예: 10초)으로 상태를 자동으로 저장\r\n    const autoSaveInterval = setInterval(() => {\r\n      saveGameState();\r\n    }, 10000); // 10초마다 저장\r\n\r\n    return () => {\r\n      removeEventListener(\"GameOver\", handleGameOver);\r\n      clearInterval(autoSaveInterval); // 컴포넌트 언마운트 시 인터벌 클리어\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>UnityProject Game</h1>\r\n      <Container>\r\n        {playingGame ? (\r\n          <Unity\r\n            unityProvider={unityProvider}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          />\r\n        ) : null}\r\n      </Container>\r\n\r\n      {/* Unity에서 게임 오버 메시지를 받으면 출력 후 종료 */}\r\n      {isGameOver === true && (\r\n        <p>{`Game Over ${userName}! You've scored ${score} points.`}</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}